{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["error","props","className","role","Form","style","color","onSubmit","loadweather","type","placeholder","name","autoComplete","Weather","cityname","weatherIcon","temp_fairenheit","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","App","getWeather","e","a","preventDefault","country","target","value","city","fetch","api_call","json","response","setState","sys","countryName","main","weather","celsius","calCelsius","temp","get_WeatherIcon","id","console","log","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f79e7351.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n\nimport React from \"react\";\nimport \"./Form.css\";\n\nconst Form = props => {\n  //input component\n  return (\n    <div className='container h-100'>\n      <h2 style={{ color: \"#dc3545\" }}>Weather | React</h2>\n\n      <form onSubmit={props.loadweather}>\n        <div>{props.error ? error() : \"\"}</div>\n        <div className='row'>\n          <div className='col-md-3 offset-md-2'>\n            <input\n              type='text'\n              className='form-control'\n              placeholder='City'\n              name='city'\n              autoComplete='off'\n            />\n          </div>\n          <div className='title'></div>\n          <div className='col-md-3'>\n            <input\n              type='text'\n              className='form-control'\n              placeholder='Country'\n              name='country'\n              autoComplete='off'\n            />\n          </div>\n          <div className='col-md-3 mt-md-0 mt-2 text-md-left '>\n            <button className='btn btn-danger'>Get Weather</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst error = props => {\n  return (\n    <div className='alert alert-danger mx-5' role='alert'>\n      Please Enter City and Country...!\n    </div>\n  );\n};\n\nexport default Form;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n/* eslint-disable jsx-a11y/heading-has-content */\nimport React from \"react\";\nimport \"./Weather.css\";\n\nconst Weather = props => {\n  //display component...\n  return (\n    <div className='container'>\n      <div className='Card'>\n        <h1 className='text-white py-3'>{props.cityname}</h1>\n        <h5 className='py-4'>\n          <i className={`wi ${props.weatherIcon} display-1`} />\n        </h5>\n\n        {/* Get Celsius */}\n        {props.temp_fairenheit ? (\n          <h1 className='py-2'>{props.temp_celsius}&deg;</h1>\n        ) : null}\n\n        {/* show max and min temp */}\n        {minmaxTemp(props.temp_min, props.temp_max)}\n\n        {/* Weather description */}\n        <h4 className='py-3'>\n          {props.description.charAt(0).toUpperCase() +\n            props.description.slice(1)}\n        </h4>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n\nfunction minmaxTemp(min, max) {\n  if (max && min) {\n    return (\n      <h3>\n        <span className='px-4'>{min}&deg;</span>\n        <span className='px-4'>{max}&deg;</span>\n      </h3>\n    );\n  }\n}\n","/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/jsx-no-undef */\nimport React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// git project https://github.com/erikflowers/weather-icons\nimport \"weather-icons/css/weather-icons.css\";\nconst Api_Key = \"9a8dc446d308ec102ee5b043b6c94585\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.country.value;\n    const city = e.target.city.value;\n\n    if (country && city) {\n      const Api_Key = \"c36da6fe5fc960fa20baa69893c33df2\";\n\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.countryName,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // setting icons\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n      console.log(response);\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          cityname={this.state.city}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}